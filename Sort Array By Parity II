#Given an array A of non-negative integers, half of the integers in A are odd, and half of the integers are even.
#Sort the array so that whenever A[i] is odd, i is odd; and whenever A[i] is even, i is even.
#You may return any answer array that satisfies this condition.


class Solution:
    def sortArrayByParityII(self, A: 'List[int]') -> 'List[int]':
        odd, even = [], []
        new_odd = [odd.extend([0, x]) for x in A if x % 2 == 1]
        new_even = [even.extend([x, 0]) for x in A if x % 2 == 0]

        return [odd[i] + even[i] for i in range(len(odd))]


class Solution:
    def sortArrayByParityII(self, A: 'List[int]') -> 'List[int]':
        a = 0
        b = 0
        buff = [0] * len(A)
        for i in A:
            if i % 2 == 0:
                buff[2 * a] = i
                a += 1
            else:
                buff[2 * b + 1] = i
                b += 1
        return buff
            


class Solution:
    def sortArrayByParityII(self, A: 'List[int]') -> 'List[int]':
        i = 0
        while i < len(A):
            if (i + A[i]) % 2 == 0:
                i += 1
            else:
                A.append(A.pop(i))

        return A
        
class Solution:
    def sortArrayByParityII(self, A: 'List[int]') -> 'List[int]':
        j = 1
        for i in range(0, len(A), 2):
            if A[i] % 2 == 1:
                while A[j] % 2 == 1:
                    j += 2
                A[i], A[j] = A[j], A[i]


        return A
