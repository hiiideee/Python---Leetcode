#A self-dividing number is a number that is divisible by every digit it contains.
#For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.
#Also, a self-dividing number is not allowed to contain the digit zero.
#Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.



class Solution:
    def selfDividingNumbers(self, left: 'int', right: 'int') -> 'List[int]':

        ans = [x for x in range(left, right + 1) if str(x).count('0') == 0]
        lens = len(ans)
        index = 0
        while index < lens:
            for i in range(len(str(ans[index]))):
                if  ans[index] % int(str(ans[index])[i]) != 0 :
                    del ans[index]
                    lens -= 1
                    index -= 1
                    break
            index += 1

        return ans
        
        
class Solution:
    def selfDividingNumbers(self, left: 'int', right: 'int') -> 'List[int]':

        ans = []
        for i in range(left, right + 1):
            for char in str(i):
                if char == '0' or i % int(char) != 0:
                    break
            else:
                ans.append(i)

        return ans

